{"version":3,"file":"markdownService.js","names":["Marked","__marked","markedHighlight","__marked_highlight","hljs","_interopRequireDefault","__hljs","js","__js","xml","__xml","css","__css","shell","__shell","bash","__bash","json","__json","registerLanguage","marked","highlight","code","lang","getLanguage","language","value","renderer","paragraph","text","regEx","match","image","trim","substring","length","imagePath","use","__exports","__esModule","markdownService"],"sources":["markdownService.ts"],"sourcesContent":["import { Marked } from \"marked\";\nimport { markedHighlight } from \"marked-highlight\";\nimport hljs from \"highlight.js/lib/core\";\nimport js from \"highlight.js/lib/languages/javascript\";\nimport xml from \"highlight.js/lib/languages/xml\";\nimport css from \"highlight.js/lib/languages/css\";\nimport shell from \"highlight.js/lib/languages/shell\";\nimport bash from \"highlight.js/lib/languages/bash\";\nimport json from \"highlight.js/lib/languages/json\";\n\n// Prevent Rollup \"Unexpected token Error\", some tokens within certain language definitions (i.e. arduino) throw rollup off\n// Err: \"rollup-plugin-inject: failed to parse '<path-to-file.js>' Consider restricting the plugin to particular files via options.include\"\nhljs.registerLanguage(\"javascript\", js);\nhljs.registerLanguage(\"xml\", xml);\nhljs.registerLanguage(\"css\", css);\nhljs.registerLanguage(\"shell\", shell);\nhljs.registerLanguage(\"bash\", bash);\nhljs.registerLanguage(\"json\", json);\n\nconst marked = new Marked(\n\tmarkedHighlight({\n\t\thighlight(code, lang) {\n\t\t\tif (lang && hljs.getLanguage(lang)) {\n\t\t\t\treturn hljs.highlight(code, { language: lang }).value;\n\t\t\t}\n\t\t},\n\t})\n);\n\n/**\n * Image Rendering\n * @returns {HTMLImageElement|string} Dynamic image HTML-Tag\n */\nconst renderer = {\n\tparagraph(text: string) {\n\t\t// transform <p>-tags that match the regex to <img>-tags\n\t\tconst regEx = /\\[\\[.+?\\.(?:jpg|gif|png)\\]\\]/g;\n\t\t// doesn't match our [[<something>.jpg]]-pattern\n\t\tif (!text.match(regEx)) return false;\n\t\t// remove whitespace (edge case) && remove '[[' and ']]'\n\t\tconst image = text.trim() && text.substring(2, text.length - 2);\n\t\t// rebuild image path for raw github\n\t\tconst imagePath = `https://raw.githubusercontent.com/wiki/wridgeu/wridgeu.github.io/${image}`;\n\n\t\treturn `<img class=\"wikiImage\" src=\"${imagePath}\"></img>`;\n\t},\n};\n\nmarked.use({ renderer });\n\n/**\n * @namespace sapmarco.projectpages.util\n */\nexport { marked as markdownService };\n"],"mappings":"kaAASA,EAAMC,EAAA,gBACNC,EAAeC,EAAA,yBACjBC,EAAIC,EAAAC,GAAA,MACJC,EAAEF,EAAAG,GAAA,MACFC,EAAGJ,EAAAK,GAAA,MACHC,EAAGN,EAAAO,GAAA,MACHC,EAAKR,EAAAS,GAAA,MACLC,EAAIV,EAAAW,GAAA,MACJC,EAAIZ,EAAAa,GAIXd,EAAKe,iBAAiB,aAAcZ,GACpCH,EAAKe,iBAAiB,MAAOV,GAC7BL,EAAKe,iBAAiB,MAAOR,GAC7BP,EAAKe,iBAAiB,QAASN,GAC/BT,EAAKe,iBAAiB,OAAQJ,GAC9BX,EAAKe,iBAAiB,OAAQF,GAE9B,MAAMG,EAAS,IAAIpB,EAClBE,EAAgB,CACfmB,UAAUC,EAAMC,GACf,GAAIA,GAAQnB,EAAKoB,YAAYD,GAAO,CACnC,OAAOnB,EAAKiB,UAAUC,EAAM,CAAEG,SAAUF,IAAQG,KACjD,CACD,KAQF,MAAMC,EAAW,CAChBC,UAAUC,GAET,MAAMC,EAAQ,gCAEd,IAAKD,EAAKE,MAAMD,GAAQ,OAAO,MAE/B,MAAME,EAAQH,EAAKI,QAAUJ,EAAKK,UAAU,EAAGL,EAAKM,OAAS,GAE7D,MAAMC,EAAa,oEAAmEJ,IAEtF,MAAQ,+BAA8BI,WACvC,GAGDhB,EAAOiB,IAAI,CAAEV,aAEb,IAAAW,EAAA,CAAAC,WAAA,MAAAD,EAGmBE,gBAAepB,EAAA,OAAAkB,CAAA"}